{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios'\n\nconst PIXABAY_SECRET_KEY = '36979931-b9ebd2c49fac6caefdf5e0dc3'\n\nfunction fetchPhotoCollection(query) {\n\treturn axios\n\t\t.get(`https://pixabay.com/api/`, {\n\t\t\tparams: {\n\t\t\t\tkey: PIXABAY_SECRET_KEY,\n\t\t\t\tq: query,\n\t\t\t\timage_type: 'photo',\n\t\t\t\torientation: 'horizontal',\n\t\t\t\tsafesearch: true,\n\t\t\t},\n\t\t})\n\t\t.then(resp => resp.data)\n}\n\nexport default fetchPhotoCollection\n","import SimpleLightbox from 'simplelightbox'\nimport 'simplelightbox/dist/simple-lightbox.min.css'\n\nconst loader = document.querySelector('.loader')\nconst gallery = document.querySelector('.gallery')\n\nlet simplelightbox = new SimpleLightbox('.gallery-link', {\n\tcaptionsData: 'alt',\n\tcaptionPosition: 'bottom',\n\tcaptionDelay: 250,\n})\n\nfunction buildPhotoGrid(images) {\n\tconst markup = images\n\t\t.map(\n\t\t\t({\n\t\t\t\twebformatURL,\n\t\t\t\tlargeImageURL,\n\t\t\t\ttags,\n\t\t\t\tlikes,\n\t\t\t\tviews,\n\t\t\t\tcomments,\n\t\t\t\tdownloads,\n\t\t\t}) => `<li class=\"gallery-item\">\n      <a class=\"gallery-link\" href=${largeImageURL}>\n      <div class=\"image-container\">\n        <img class=\"gallery-image\" src=\"${webformatURL}\" alt=\"${tags}\" />\n        </div>\n        <div class=\"image-inform\">\n          <div>\n            <h3 class=\"image-inform-title\">Likes</h3>\n            <span class=\"image-inform-text\">${likes}</span>\n          </div>\n          <div>\n            <h3 class=\"image-inform-title\">Views</h3>\n            <span class=\"image-inform-text\">${views}</span>\n          </div>\n          <div>\n            <h3 class=\"image-inform-title\">Comments</h3>\n            <span class=\"image-inform-text\">${comments}</span>\n          </div>\n          <div>\n            <h3 class=\"image-inform-title\">Downloads</h3>\n            <span class=\"image-inform-text\">${downloads}</span>\n          </div>\n        </div>\n      </a>\n    </li>`\n\t\t)\n\t\t.join('')\n\n\tgallery.innerHTML = markup\n\tsimplelightbox.refresh()\n}\n\nfunction emptyPhotoContainer() {\n\tgallery.innerHTML = ''\n}\n\nfunction activateSpinner() {\n\tloader.classList.remove('hidden')\n}\n\nfunction deactivateSpinner() {\n\tloader.classList.add('hidden')\n}\n\nexport {\n\tactivateSpinner,\n\tbuildPhotoGrid,\n\tdeactivateSpinner,\n\temptyPhotoContainer,\n}\n","import iziToast from 'izitoast'\nimport 'izitoast/dist/css/iziToast.min.css'\n\nimport fetchPhotoCollection from './js/pixabay-api'\nimport {\n\tactivateSpinner,\n\tbuildPhotoGrid,\n\tdeactivateSpinner,\n\temptyPhotoContainer,\n} from './js/render-functions'\n\nconst form = document.querySelector('.form')\n\nform.addEventListener('submit', handleSearchImages)\n\ndeactivateSpinner()\n\nfunction handleSearchImages(event) {\n\tevent.preventDefault()\n\temptyPhotoContainer()\n\tactivateSpinner()\n\tconst searchImage = event.target.elements['search-text'].value.trim()\n\n\tif (!searchImage) {\n\t\tiziToast.error({\n\t\t\tmessage: 'Please enter some valid search value!',\n\t\t\tmessageSize: '16px',\n\t\t\tmessageLineHeight: '24px',\n\t\t\tmessageColor: '#fafafb',\n\t\t\tcloseOnClick: true,\n\t\t\tposition: 'topRight',\n\t\t})\n\t\tdeactivateSpinner()\n\t\treturn\n\t}\n\n\tfetchPhotoCollection(searchImage)\n\t\t.then(({ hits }) => {\n\t\t\tif (hits.length === 0) {\n\t\t\t\tiziToast.error({\n\t\t\t\t\tmessage:\n\t\t\t\t\t\t'Sorry, there are no images matching your search query. Please try again!',\n\t\t\t\t\tmessageSize: '16px',\n\t\t\t\t\tmessageLineHeight: '24px',\n\t\t\t\t\tmessageColor: '#fafafb',\n\t\t\t\t\tcloseOnClick: true,\n\t\t\t\t\tposition: 'topRight',\n\t\t\t\t})\n\t\t\t\tdeactivateSpinner()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tbuildPhotoGrid(hits)\n\t\t})\n\t\t.catch(error =>\n\t\t\tiziToast.error({\n\t\t\t\tmessage: `${error.message}. Please try again later`,\n\t\t\t\tcloseOnClick: true,\n\t\t\t\tposition: 'topRight',\n\t\t\t})\n\t\t)\n\t\t.finally(() => {\n\t\t\tdeactivateSpinner()\n\t\t\tform.reset()\n\t\t})\n}\n"],"names":["PIXABAY_SECRET_KEY","fetchPhotoCollection","query","axios","resp","loader","gallery","simplelightbox","SimpleLightbox","buildPhotoGrid","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","emptyPhotoContainer","activateSpinner","deactivateSpinner","form","handleSearchImages","event","searchImage","iziToast","hits","error"],"mappings":"owBAEA,MAAMA,EAAqB,qCAE3B,SAASC,EAAqBC,EAAO,CACpC,OAAOC,EACL,IAAI,2BAA4B,CAChC,OAAQ,CACP,IAAKH,EACL,EAAGE,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACZ,CACJ,CAAG,EACA,KAAKE,GAAQA,EAAK,IAAI,CACzB,CCbA,MAAMC,EAAS,SAAS,cAAc,SAAS,EACzCC,EAAU,SAAS,cAAc,UAAU,EAEjD,IAAIC,EAAiB,IAAIC,EAAe,gBAAiB,CACxD,aAAc,MACd,gBAAiB,SACjB,aAAc,GACf,CAAC,EAED,SAASC,EAAeC,EAAQ,CAC/B,MAAMC,EAASD,EACb,IACA,CAAC,CACA,aAAAE,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACJ,IAAS;AAAA,qCAC4BL,CAAa;AAAA;AAAA,0CAERD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA,8CAKtBC,CAAK;AAAA;AAAA;AAAA;AAAA,8CAILC,CAAK;AAAA;AAAA;AAAA;AAAA,8CAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,8CAIRC,CAAS;AAAA;AAAA;AAAA;AAAA,UAKpD,EACA,KAAK,EAAE,EAETZ,EAAQ,UAAYK,EACpBJ,EAAe,QAAS,CACzB,CAEA,SAASY,GAAsB,CAC9Bb,EAAQ,UAAY,EACrB,CAEA,SAASc,GAAkB,CAC1Bf,EAAO,UAAU,OAAO,QAAQ,CACjC,CAEA,SAASgB,GAAoB,CAC5BhB,EAAO,UAAU,IAAI,QAAQ,CAC9B,CCtDA,MAAMiB,EAAO,SAAS,cAAc,OAAO,EAE3CA,EAAK,iBAAiB,SAAUC,CAAkB,EAElDF,EAAmB,EAEnB,SAASE,EAAmBC,EAAO,CAClCA,EAAM,eAAgB,EACtBL,EAAqB,EACrBC,EAAiB,EACjB,MAAMK,EAAcD,EAAM,OAAO,SAAS,aAAa,EAAE,MAAM,KAAM,EAErE,GAAI,CAACC,EAAa,CACjBC,EAAS,MAAM,CACd,QAAS,wCACT,YAAa,OACb,kBAAmB,OACnB,aAAc,UACd,aAAc,GACd,SAAU,UACb,CAAG,EACDL,EAAmB,EACnB,MACA,CAEDpB,EAAqBwB,CAAW,EAC9B,KAAK,CAAC,CAAE,KAAAE,KAAW,CACnB,GAAIA,EAAK,SAAW,EAAG,CACtBD,EAAS,MAAM,CACd,QACC,2EACD,YAAa,OACb,kBAAmB,OACnB,aAAc,UACd,aAAc,GACd,SAAU,UACf,CAAK,EACDL,EAAmB,EACnB,MACA,CACDZ,EAAekB,CAAI,CACtB,CAAG,EACA,MAAMC,GACNF,EAAS,MAAM,CACd,QAAS,GAAGE,EAAM,OAAO,2BACzB,aAAc,GACd,SAAU,UACd,CAAI,CACD,EACA,QAAQ,IAAM,CACdP,EAAmB,EACnBC,EAAK,MAAO,CACf,CAAG,CACH"}